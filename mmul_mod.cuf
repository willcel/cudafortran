!  start the module containing the matmul kernel
module mmul_mod
  use cudafor
 contains
  ! mmul_kernel computes A*B into C where
  ! A is NxM, B is MxL, C is then NxL
  attributes(global) subroutine mmul_kernel( A, B, C, N, M, L )
   real :: A(N,M), B(M,L), C(N,L)
   integer, value :: N, M, L
   integer :: i, j, kb, k, tx, ty
   ! submatrices stored in shared memory
   real, shared :: Asub(16,16), Bsub(16,16)
   ! the value of C(i,j) being computed
   real :: Cij
   ! Get the thread indices
   tx = threadidx%x
   ty = threadidx%y
   ! This thread computes C(i,j) = sum(A(i,:) * B(:,j))
   i = (blockidx%x-1) * 16 + tx
   j = (blockidx%y-1) * 16 + ty
   Cij = 0.0
   ! Do the k loop in chunks of 16, the block size
   do kb = 1, M, 16
     ! Fill the submatrices
     ! Each of the 16x16 threads in the thread block
     ! loads one element of Asub and Bsub
      Asub(tx,ty) = A(i,kb+ty-1)
     Bsub(tx,ty) = B(kb+tx-1,j)
     ! Wait until all elements are filled
     call syncthreads()
     ! Multiply the two submatrices
     ! Each of the 16x16 threads accumulates the
     ! dot product for its element of C(i,j)
     do k = 1,16
       Cij = Cij + Asub(tx,k) * Bsub(k,ty)
     enddo
     ! Synchronize to make sure all threads are done
     ! reading the submatrices before overwriting them
     ! in the next iteration of the kb loop
     call syncthreads()
   enddo
   ! Each of the 16x16 threads stores its element
   ! to the global C array
   C(i,j) = Cij
   end subroutine mmul_kernel
 ! The host routine to drive the matrix multiplication
  subroutine mmul( A, B, C )
   real, dimension(:,:) :: A, B, C
   ! allocatable device arrays
   real, device, allocatable, dimension(:,:) :: Adev,Bdev,Cdev
   ! dim3 variables to define the grid and block shapes
   type(dim3) :: dimGrid, dimBlock
   ! Get the array sizes
   N = size( A, 1 )
   M = size( A, 2 )
   L = size( B, 2 )
   ! Allocate the device arrays
   allocate( Adev(N,M), Bdev(M,L), Cdev(N,L) )
   ! Copy A and B to the device
   Adev = A(1:N,1:M)
   Bdev(:,:) = B(1:M,1:L)
   ! Create the grid and block dimensions
   dimGrid = dim3( N/16, L/16, 1 )
   dimBlock = dim3( 16, 16, 1 )
   call mmul_kernel<<<dimGrid,dimBlock>>>( Adev, Bdev, Cdev, N, M, L)
   ! Copy the results back and free up memory
   C(1:N,1:L) = Cdev
   deallocate( Adev, Bdev, Cdev )
  end subroutine mmul
end module mmul_mod

program array_multiply
  use mmul_mod
  use cudafor
  implicit none
  
  integer, parameter :: n = 3000 !65536
  real :: a(n,n), b(n,n), c(n,n)
  integer :: i, j
  integer :: iTimes1, iTimes2, rate
  
  ! Initialize arrays a and b
  do i = 1, n
    do j = 1, n
      a(i,j) = i + j
      b(i,j) = i - j
      ! c(i,j) = 0.01
    end do
  end do

  write(*,*) "A:"
  ! do i = 1, n
  !   write(*,*) a(i,:)
  ! end do

  write(*,*) "B:"
  ! do i = 1, n
  !   write(*,*) b(i,:)
  ! end do

  CALL system_clock(count_rate=rate)
  call SYSTEM_CLOCK(iTimes1)

  ! Multiply arrays a and b element-wise
  ! c = matmul(a,b)
  call mmul(a,b,c)
  call SYSTEM_CLOCK(iTimes2)
  
  ! Print the result
  write(*,*) "Result:"
  ! do i = 1, n
  !   write(*,*) c(i,:)
  ! end do

  write(*,*) 'consume time t2-t1:', real(iTimes2-iTimes1)/real(rate)
  
end program array_multiply
  